# coding: utf-8

"""
    hcOS Developer Experience

    hcOS Developer Experience API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from hcos_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_search_by_kdsl(self, body, x_correlation_id, x_hcos_user_root, x_hcos_user_extension, tenant_id, **kwargs):  # noqa: E501
        """Requests documents by KDSL.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_by_kdsl(body, x_correlation_id, x_hcos_user_root, x_hcos_user_extension, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchCriterion body: (required)
        :param str x_correlation_id: (required)
        :param str x_hcos_user_root: (required)
        :param str x_hcos_user_extension: (required)
        :param str tenant_id: (required)
        :param int _from:
        :param int size:
        :param str snippet:
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_search_by_kdsl_with_http_info(body, x_correlation_id, x_hcos_user_root, x_hcos_user_extension, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_search_by_kdsl_with_http_info(body, x_correlation_id, x_hcos_user_root, x_hcos_user_extension, tenant_id, **kwargs)  # noqa: E501
            return data

    def post_search_by_kdsl_with_http_info(self, body, x_correlation_id, x_hcos_user_root, x_hcos_user_extension, tenant_id, **kwargs):  # noqa: E501
        """Requests documents by KDSL.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_by_kdsl_with_http_info(body, x_correlation_id, x_hcos_user_root, x_hcos_user_extension, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchCriterion body: (required)
        :param str x_correlation_id: (required)
        :param str x_hcos_user_root: (required)
        :param str x_hcos_user_extension: (required)
        :param str tenant_id: (required)
        :param int _from:
        :param int size:
        :param str snippet:
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_correlation_id', 'x_hcos_user_root', 'x_hcos_user_extension', 'tenant_id', '_from', 'size', 'snippet']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_by_kdsl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_search_by_kdsl`")  # noqa: E501
        # verify the required parameter 'x_correlation_id' is set
        if ('x_correlation_id' not in params or
                params['x_correlation_id'] is None):
            raise ValueError("Missing the required parameter `x_correlation_id` when calling `post_search_by_kdsl`")  # noqa: E501
        # verify the required parameter 'x_hcos_user_root' is set
        if ('x_hcos_user_root' not in params or
                params['x_hcos_user_root'] is None):
            raise ValueError("Missing the required parameter `x_hcos_user_root` when calling `post_search_by_kdsl`")  # noqa: E501
        # verify the required parameter 'x_hcos_user_extension' is set
        if ('x_hcos_user_extension' not in params or
                params['x_hcos_user_extension'] is None):
            raise ValueError("Missing the required parameter `x_hcos_user_extension` when calling `post_search_by_kdsl`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `post_search_by_kdsl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant_id'] = params['tenant_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'snippet' in params:
            query_params.append(('snippet', params['snippet']))  # noqa: E501

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlation-id'] = params['x_correlation_id']  # noqa: E501
        if 'x_hcos_user_root' in params:
            header_params['x-hcos-user-root'] = params['x_hcos_user_root']  # noqa: E501
        if 'x_hcos_user_extension' in params:
            header_params['x-hcos-user-extension'] = params['x_hcos_user_extension']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/{tenant_id}/documents/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
